#include <stdio.h>
struct Process {
    int pid;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};

void findWaitingTime(struct Process proc[], int n) {
    int complete = 0, t = 0, minm = 10000;
    int shortest = 0, finish_time;
    int check = 0;
    int rt[n];
    for (int i = 0; i < n; i++)
        rt[i] = proc[i].burst_time;

    while (complete != n) {
        for (int j = 0; j < n; j++) {
            if ((proc[j].arrival_time <= t) && (rt[j] < minm) && rt[j] > 0) {
                minm = rt[j];
                shortest = j;
                check = 1;
            }
        }
        if (check == 0) {
            t++;
            continue;
        }
        rt[shortest]--;
        minm = rt[shortest];
        if (minm == 0)
            minm = 10000;
        if (rt[shortest] == 0) {
            complete++;
            check = 0;
            finish_time = t + 1;
            proc[shortest].waiting_time = finish_time - proc[shortest].burst_time - proc[shortest].arrival_time;
            if (proc[shortest].waiting_time < 0)
                proc[shortest].waiting_time = 0;
        }
        t++;
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++)
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
}

void findAverageTime(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;

    findWaitingTime(proc, n);
    findTurnaroundTime(proc, n);

    printf("Processes  Burst time  Arrival time  Waiting time  Turnaround time\n");

    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf("   %d \t\t%d \t\t%d \t\t%d \t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].arrival_time, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_waiting_time / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / (float)n);
}

int main() {
    struct Process proc[] = {{1, 6, 0}, {2, 8, 1}, {3, 7, 2}, {4, 3, 3}};
    int n = sizeof(proc) / sizeof(proc[0]);

    findAverageTime(proc, n);

    return 0;
}
