#include <stdio.h>
#include <stdlib.h>

void fcfs(int RQ[], int n, int initial) {
    int TotalHeadMovement = 0;
    for (int i = 0; i < n; i++) {
        TotalHeadMovement += abs(RQ[i] - initial);
        initial = RQ[i];
    }
    printf("Total head movement for FCFS is %d\n", TotalHeadMovement);
}

void scan(int RQ[], int n, int initial, int size, int move) {
    int TotalHeadMovement = 0;

    // Sort the request array
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j] > RQ[j + 1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (initial < RQ[index]) {
            break;
        }
    }

    if (move == 1) { // Move towards high value
        for (int i = index; i < n; i++) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMovement += abs(size - 1 - initial);
        initial = size - 1;
        for (int i = index - 1; i >= 0; i--) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    } else { // Move towards low value
        for (int i = index - 1; i >= 0; i--) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMovement += abs(initial - 0);
        initial = 0;
        for (int i = index; i < n; i++) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }
    printf("Total head movement for SCAN is %d\n", TotalHeadMovement);
}

void cscan(int RQ[], int n, int initial, int size, int move) {
    int TotalHeadMovement = 0;

    // Sort the request array
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (RQ[j] > RQ[j + 1]) {
                int temp = RQ[j];
                RQ[j] = RQ[j + 1];
                RQ[j + 1] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (initial < RQ[index]) {
            break;
        }
    }

    if (move == 1) { // Move towards high value
        for (int i = index; i < n; i++) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMovement += abs(size - 1 - initial);
        TotalHeadMovement += size - 1; // From max to min disk
        initial = 0;
        for (int i = 0; i < index; i++) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    } else { // Move towards low value
        for (int i = index - 1; i >= 0; i--) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMovement += abs(initial - 0);
        TotalHeadMovement += size - 1; // From min to max disk
        initial = size - 1;
        for (int i = n - 1; i >= index; i--) {
            TotalHeadMovement += abs(RQ[i] - initial);
            initial = RQ[i];
        }
    }
    printf("Total head movement for C-SCAN is %d\n", TotalHeadMovement);
}

int main() {
    int RQ[100], n, initial, size, move;

    printf("Enter the number of Requests: ");
    scanf("%d", &n);
    printf("Enter the Requests sequence: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &RQ[i]);
    }
    printf("Enter initial head position: ");
    scanf("%d", &initial);

    printf("\nFCFS Disk Scheduling:\n");
    fcfs(RQ, n, initial);

    printf("\nEnter total disk size: ");
    scanf("%d", &size);
    printf("Enter the head movement direction for high (1) and for low (0): ");
    scanf("%d", &move);

    printf("\nSCAN Disk Scheduling:\n");
    scan(RQ, n, initial, size, move);

    printf("\nC-SCAN Disk Scheduling:\n");
    cscan(RQ, n, initial, size, move);

    return 0;
}
