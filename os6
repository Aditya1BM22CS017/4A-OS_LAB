#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int main() {
    int n, m, i, j, k;
    n = 5;  
    m = 3;  

    int alloc[MAX_PROCESSES][MAX_RESOURCES] = { { 0, 1, 0 }, 
                                                { 2, 0, 0 }, 
                                                { 3, 0, 2 }, 
                                                { 2, 1, 1 }, 
                                                { 0, 0, 2 } }; 

    int max[MAX_PROCESSES][MAX_RESOURCES] = { { 7, 5, 3 }, 
                                              { 3, 2, 2 }, 
                                              { 9, 0, 2 }, 
                                              { 2, 2, 2 }, 
                                              { 4, 3, 3 } }; 

    int avail[MAX_RESOURCES] = { 3, 3, 2 };  
    int f[MAX_PROCESSES], ans[MAX_PROCESSES], ind = 0;
    for (k = 0; k < n; k++) {
        f[k] = 0;
    }

    int need[MAX_PROCESSES][MAX_RESOURCES];
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
    printf("Need matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    int y = 0;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                bool flag = true;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = false;
                        break;
                    }    }
                if (flag) {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++) {
                        avail[y] += alloc[i][y];
                    }
                    f[i] = 1;
                }
            }
        }
    }
    printf("Following is the SAFE Sequence:\n");
    for (i = 0; i < n - 1; i++) {
        printf(" P%d ->", ans[i]);
    }
    printf(" P%d\n", ans[n - 1]);

    return 0;
}
