#include <stdio.h>

struct Process {
    int pid;
    int burst_time;
    int arrival_time;
    int priority;
    int waiting_time;
    int turnaround_time;
};

void findWaitingTime(struct Process proc[], int n) {
    int completed[n];
    for (int i = 0; i < n; i++)
        completed[i] = 0;

    int t = 0;
    int completed_count = 0;

    while (completed_count < n) {
        int min_priority = 10000;
        int idx = -1;
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival_time <= t && !completed[i] && proc[i].priority < min_priority) {
                min_priority = proc[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            t += proc[idx].burst_time;
            proc[idx].waiting_time = t - proc[idx].burst_time - proc[idx].arrival_time;
            if (proc[idx].waiting_time < 0)
                proc[idx].waiting_time = 0;
            completed[idx] = 1;
            completed_count++;
        } else {
            t++;
        }
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++)
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
}

void findAverageTime(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;

    findWaitingTime(proc, n);
    findTurnaroundTime(proc, n);

    printf("Processes  Burst time  Arrival time  Priority  Waiting time  Turnaround time\n");

    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf("   %d \t\t%d \t\t%d \t\t%d \t\t%d \t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].arrival_time, proc[i].priority, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_waiting_time / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / (float)n);
}

int main() {
    struct Process proc[] = {{1, 6, 0, 2}, {2, 8, 1, 1}, {3, 7, 2, 3}, {4, 3, 3, 2}};
    int n = sizeof(proc) / sizeof(proc[0]);

    findAverageTime(proc, n);

    return 0;
}
