#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define N 
sem_t forks[N];
sem_t mutex;

void *philosopher(void *num) {
    int id = *(int *)num;
    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1); 

        sem_wait(&mutex); 
        sem_wait(&forks[id]);
        sem_wait(&forks[(id + 1) % N]);

        printf("Philosopher %d is eating.\n", id);
        sleep(1); 

        sem_post(&forks[id]); // Put down chopsticks
        sem_post(&forks[(id + 1) % N]);
        sem_post(&mutex);

        printf("Philosopher %d is done eating and starts thinking again.\n", id);
        sleep(1); 
    }
}

int main() {
    pthread_t tid[N];
    int ids[N];

    sem_init(&mutex, 0, 1); 

    for (int i = 0; i < N; i++) {
        sem_init(&forks[i], 0, 1); 
        ids[i] = i;
    }

    for (int i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < N; i++) {
        pthread_join(tid[i], NULL);
    }

    for (int i = 0; i < N; i++) {
        sem_destroy(&forks[i]);
    }
    sem_destroy(&mutex);

    return 0;
}
