#include <stdio.h>
struct Process {
    int pid;        // Process ID
    int burst_time; // Burst time
    int arrival_time; // Arrival time
    int waiting_time; // Waiting time
    int turnaround_time; // Turnaround time
};
void findWaitingTime(struct Process proc[], int n) {
    int service_time[n];
    service_time[0] = proc[0].arrival_time;
    proc[0].waiting_time = 0;

    for (int i = 1; i < n; i++) {
        service_time[i] = service_time[i-1] + proc[i-1].burst_time;
        proc[i].waiting_time = service_time[i] - proc[i].arrival_time;
        if (proc[i].waiting_time < 0)
            proc[i].waiting_time = 0;
    }
}
void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++)
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
}
void findAverageTime(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    findWaitingTime(proc, n);
    findTurnaroundTime(proc, n);
    printf("Processes  Burst time  Arrival time  Waiting time  Turnaround time\n");
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf("   %d \t\t%d \t\t%d \t\t%d \t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].arrival_time, proc[i].waiting_time, proc[i].turnaround_time);
    }
    printf("Average waiting time = %.2f\n", (float)total_waiting_time / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / (float)n);
}

int main() {
    struct Process proc[] = {{1, 10, 0}, {2, 5, 1}, {3, 8, 2}};
    int n = sizeof(proc) / sizeof(proc[0]);

    findAverageTime(proc, n);

    return 0;
}
